# ********************************************************************************************************************
#                                                      NimbleSM
#                                                VALIDATION TESTING
#
# ## Test files requirements ##
# 1/ NimbleSM executables shall be named NimbleSM_XXXX with XXXX being a specific version (Serial, Kokkos, ...)
# 2/ Convention over configuration: Each test shall be stored in a separate folder. The name of the folder and the
#    files it contains must be identical.
#    Example: test/example1/example1.in example1.g example1.gold.e example1.exodiff
# 3/ All tests are run using the default python interpreter in the current environment
# 4/ A typical test contains the following files:
#      .g       the model
#      .in      details of the simulation
#      .exodiff tolerances between gold.e file and generated .e file
#      .gold.e  "gold" file containing expected results
#      .g.x.y   Files generated by seacas `decomp` for parallel processing
#
# ## Configuring tests ##
# 1/ NimbleSM Binaries
# The variable `lstVersions` is a list that contains the suffix of all binaries to be tested.
# eg. If the build generates `NimbleSM_Serial` and `NimbleSM_Kokkos`, then lstVersions shall contain
#     two values: "Serial" and "Kokkos".
#
# 2/ Command lines for each binary
# For each binary, one or more command lines shall be specified. Such command lines are stored as string lists
# in variables named lstTestCLI_BINARY, with BINARY being one of the suffixes mentioned above.
# eg. list(APPEND lstTestsCLI_Serial
#        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_"
#        )
#
# 3/ Tests to be run
# For each binary, one or more tests shall be specified. The tests have to be stored according to the
# instructions above (## Test files requirements ##). The name of a test is the name of its folder.
# Test lists are stored as string lists in variable named lstTests_BINARY with BINARY being one of the
# suffixes mentioned above.
# eg. list(APPEND lstTests_Serial
#       test1
#       test2
#       )
#
# 4/ Multiple test lists per binary
# In some cases, for a given binary, certain tests shall only be run using specific command lines.
# For example, a test might be designed for Serial only, although a binary is being tested with two
# different command lines, one for Serial and one for Parallel calculations.
# In such case, additional CLI/Test lists might be provided for that given binary.
# eg. Kokkos have two test lists:
#   lstTestsCLI_Kokkos_A --> Command lines for both Serial and Parallel executions
#   lstTests_Kokkos_A --> Tests that can be run both in Serial and Parallel
#   lstTestsCLI_Kokkos_B --> Command line for Serial ONLY
#   lstTests_Kokkos_B --> Tests that can be run in Serial ONLY
# The naming convention is the same as in 2/ and 3/, except that a suffix "_A", "_B" or "_C" is added
# to the variable names.

# Remove below?
#if(NIMBLE_HAVE_CHARM)
#  set(charmrun ${PROJECT_BINARY_DIR}/src/charmrun)
#else()
#  set(charmrun "not available")
#endif()
#

message(STATUS "### TESTS CONFIGURATION STARTS ###")

# Defines all versions of NimbleSM to be tested
list(APPEND lstVersions
        Serial
        )

IF(NIMBLE_HAVE_ARBORX)
    list(APPEND lstVersions
            ArborX
            )
ENDIF()

IF(NIMBLE_HAVE_TRILINOS)
    list(APPEND lstVersions
            Tpetra
            )
ENDIF()

IF(NIMBLE_HAVE_MPI)
    list(APPEND lstVersions
            MPI
            )
ENDIF()

IF(NIMBLE_HAVE_KOKKOS AND NOT NIMBLE_HAVE_ARBORX)
    list(APPEND lstVersions
            Kokkos
            )
ENDIF()

if(NIMBLE_HAVE_DARMA)
    list(APPEND lstVersions
            Darma
            )
endif()

if(NIMBLE_HAVE_QTHREADS)
    list(APPEND lstVersions
            Qthreads
            )
endif()


# Generate paths to executables
foreach(version IN LISTS lstVersions)
    set(${version}_Path ${PROJECT_BINARY_DIR}/src/NimbleSM_${version})
    message(STATUS "${version} version's path: ${${version}_Path}")
endforeach()

### Defines tests to be run for each version of NimbleSM ###

### SERIAL ###

list(APPEND lstTestsCLI_Serial
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_"
        )

list(APPEND lstTests_Serial
        brick_with_fiber_periodic
        brick_with_fibers
#        contact_entity_creation
#        cylinder_with_hole
        notched_plate_native_hypoelastic
        notched_plate_native_neohookean
#        plate_with_hole_rve
        quasistatic_tension
        rigid_body_motion
        simple_deformation_modes
        single_elem_complex_displacement
#        tiny_fe_squared
        wave_in_bar
        )


### ARBORX ###

# "A" Test list for tests that can work both in Serial and MPI modes
list(APPEND lstTestsCLI_ArborX_A
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1"
        )

# Add multi-rank testing to Kokkos if MPI is enabled
IF(NIMBLE_HAVE_MPI)
    list(APPEND lstTestsCLI_ArborX_A
            "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 2"
            )
ENDIF()

list(APPEND lstTests_ArborX_A
#        brick_with_fiber_periodic
        brick_with_fibers
        contact_entity_creation
#       cylinder_with_hole
        notched_plate_native_hypoelastic
        notched_plate_native_neohookean
#        plate_with_hole_rve
#        quasistatic_tension
        rigid_body_motion
        simple_deformation_modes
#        single_elem_complex_displacement
        sphere_plate_contact
#        tiny_fe_squared
        wave_in_bar
        )

# "B" test list for tests that can only work in Serial
list(APPEND lstTestsCLI_ArborX_B
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1"
        )

list(APPEND lstTests_ArborX_B
        single_elem_complex_displacement
        sphere_plate_contact
        cubes_contact
        )


### KOKKOS ###

# "A" Test list for tests that can work both in Serial and MPI modes
list(APPEND lstTestsCLI_Kokkos_A
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1"
        )

# Add multi-rank testing to Kokkos if MPI is enabled
IF(NIMBLE_HAVE_MPI)
    list(APPEND lstTestsCLI_Kokkos_A
            "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 2"
            )
ENDIF()

list(APPEND lstTests_Kokkos_A
        brick_with_fibers
        contact_entity_creation
#        cylinder_with_hole
        notched_plate_native_hypoelastic
        notched_plate_native_neohookean
#        plate_with_hole_rve
#        quasistatic_tension
        rigid_body_motion
        simple_deformation_modes
#        tiny_fe_squared
        wave_in_bar
        )

# "B" test list for tests that can only work in Serial
list(APPEND lstTestsCLI_Kokkos_B
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1"
        )

list(APPEND lstTests_Kokkos_B
        single_elem_complex_displacement
        )

### MPI ###

list(APPEND lstTestsCLI_MPI_A
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1"
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 2"
        )

list(APPEND lstTests_MPI_A
#        brick_with_fiber_periodic
        brick_with_fibers
#        contact_entity_creation
#        cylinder_with_hole
        notched_plate_native_hypoelastic
        notched_plate_native_neohookean
#        plate_with_hole_rve
#        quasistatic_tension
        rigid_body_motion
        simple_deformation_modes
#        tiny_fe_squared
        wave_in_bar
        )

list(APPEND lstTestsCLI_MPI_B
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1"
        )
list(APPEND lstTests_MPI_B
        single_elem_complex_displacement
        )

### TRILINOS ###
# Same tests as MPI + brick_with_fiber_periodic

list(APPEND lstTestsCLI_Tpetra_A
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1"
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 2"
        )

list(APPEND lstTests_Tpetra_A
        ${lstTests_MPI_A}
        )

list(APPEND lstTestsCLI_Tpetra_B
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1"
        )

list(APPEND lstTests_Tpetra_B
        brick_with_fiber_periodic
        ${lstTests_MPI_B}
        )


### Darma ###
# Same tests as MPI

list(APPEND lstTestsCLI_Darma_A
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1 --num-virtual-ranks 1"
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 4 --num-virtual-ranks 8"
        )

list(APPEND lstTests_Darma_A
        ${lstTests_MPI_A}
        )

list(APPEND lstTestsCLI_Darma_B
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1 --num-virtual-ranks 1"
        )

list(APPEND lstTests_Darma_B
        ${lstTests_MPI_B}
        )


### Qthreads ###
# Same tests as MPI

list(APPEND lstTestsCLI_Qthreads_A
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1 --qthreads-num-shepherds 1 --qthreads-num-workers-per-shepherd 1"
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 2 --qthreads-num-shepherds 2 --qthreads-num-workers-per-shepherd 1"
        )

list(APPEND lstTestsCLI_Qthreads_A
        ${lstTests_MPI_A}
        )

list(APPEND lstTestsCLI_Qthreads_B
        "../run_exodiff_test.py --executable _EXECUTABLE_ --input-deck _INPUT_DECK_ --num-ranks 1 --qthreads-num-shepherds 1 --qthreads-num-workers-per-shepherd 1"
        )

list(APPEND lstTestsCLI_Qthreads_B
        ${lstTests_MPI_B}
        )


# Build list of available tests (appending tests selected for each version of NimbleSM and removing duplicates)
foreach (version IN LISTS lstVersions)
    foreach(listID in "" "_A" "_B" "_C")
        if(DEFINED lstTests_${version}${listID})
            list(APPEND lstTests
                    ${lstTests_${version}${listID}})
        endif()
    endforeach()
endforeach ()

list(REMOVE_DUPLICATES lstTests)

# File copy to binary dir
message(STATUS "### Copying all files necessary for testing to binary dir
     - run_exodiff_test.py
     - Files with extensions .in, .g, .gold.e, .exodiff
     - Files with extentions .g.*")

# Copy run_exodiff_test.py
configure_file(
        ${CMAKE_CURRENT_SOURCE_DIR}/run_exodiff_test.py
        ${CMAKE_CURRENT_BINARY_DIR}/run_exodiff_test.py
        COPYONLY)

# Copy all other files
foreach(test IN LISTS lstTests)
    message(STATUS " * ${test}")
    # basic extensions (in, g, gold.e, exodiff)
    foreach(ext in g gold.e exodiff)
        configure_file(
                ${CMAKE_CURRENT_SOURCE_DIR}/${test}/${test}.${ext}
                ${CMAKE_CURRENT_BINARY_DIR}/${test}/${test}.${ext}
                COPYONLY)
    endforeach()

    # files generated by seacas `decomp` for multiple-rank environments
    file(GLOB files ${CMAKE_CURRENT_SOURCE_DIR}/${test}/${test}.g.*)
    foreach(file ${files})
        get_filename_component(filename ${file} NAME)
        configure_file(
                ${file}
                ${CMAKE_CURRENT_BINARY_DIR}/${test}/${filename}
                COPYONLY)
    endforeach()
endforeach()


###    MAIN LOOP    ###
# Generates all tests #
#######################

message(STATUS "## Adding tests to CMAKE: ##")
# Go through each version of NimbleSM
foreach(version IN LISTS lstVersions)
    message(STATUS " * Version: ${version}")

    # Go through each test list
    foreach(listID in "" "_A" "_B" "_C")
        # For each version, go through each test to run
        foreach(test IN LISTS lstTests_${version}${listID})
            if(DEFINED lstTestsCLI_${version}${listID})
                set(lstCLI lstTestsCLI_${version}${listID})

                # Determines the number of Command Line variants to run for that version of NimbleSM
                list(LENGTH ${lstCLI} count)
                math(EXPR count "${count}-1")

                # For each test, go through each Command Line variant
                foreach(i RANGE ${count})
                    # Set the Command Line, test name and working directory for the current test
                    list(GET ${lstCLI} ${i} cli)
                    set(test_name ${test}_${version}${listID}_${i})
                    set(working_dir ${CMAKE_CURRENT_BINARY_DIR}/${test})

                    # Expand the command line by replacing "_EXECUTABLE_" and "_INPUT_DECK_" with variables
                    string(REPLACE _EXECUTABLE_
                    ${${version}_Path} cli
                    ${cli}
                    )

                    string(REPLACE _INPUT_DECK_
                    ${test}.in cli
                    ${cli}
                    )

                    message(STATUS "  - ${test_name}: python ${cli} (work.dir: ${working_dir})")

                    # Change cli from string to list (list required by add_test)
                    separate_arguments(cli)

                    # Add the test
                    add_test(NAME ${test_name}
                            COMMAND python ${cli}
                            WORKING_DIRECTORY ${working_dir}
                            )

                endforeach() # CLI variant
            endif()
        endforeach() # Test
    endforeach() # Test list
endforeach() # NimbleSM Version

message(STATUS "### TESTS CONFIGURATION COMPLETED ###")
